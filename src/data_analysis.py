"""data_analysis.py

Small CLI tool to inspect and summarize a CSV file, produce a Markdown
report and save some plots (histograms, correlation heatmap).

Usage example:
  python src/data_analysis.py data/sample.csv --report report.md --plots plots/

"""
from pathlib import Path
import argparse
import sys
import json

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


# Visualization settings
plt.style.use("seaborn-v0_8")
sns.set_theme()


def load_data(file_path: Path) -> pd.DataFrame:
    file_path = Path(file_path)
    if not file_path.exists():
        raise FileNotFoundError(f"File not found: {file_path}")
    if file_path.suffix.lower() == ".csv":
        return pd.read_csv(file_path)
    elif file_path.suffix.lower() in (".xls", ".xlsx"):
        return pd.read_excel(file_path)
    else:
        raise ValueError("Unsupported file format. Provide a .csv, .xls or .xlsx file.")


def summarize(df: pd.DataFrame) -> dict:
    """Return a serializable summary of the DataFrame."""
    numeric = df.select_dtypes(include=[np.number])
    non_numeric = df.select_dtypes(exclude=[np.number])

    summary = {
        "shape": df.shape,
        "columns": list(df.columns),
        "dtypes": {c: str(t) for c, t in df.dtypes.items()},
        "missing": df.isnull().sum().to_dict(),
        "numeric_summary": numeric.describe().to_dict(),
        "categorical_top": {},
    }

    # top values for categorical columns
    for c in non_numeric.columns:
        top = df[c].value_counts(dropna=False).head(10)
        summary["categorical_top"][c] = top.to_dict()

    # simple correlations
    if numeric.shape[1] > 0:
        summary["correlation"] = numeric.corr().round(4).to_dict()
    else:
        summary["correlation"] = {}

    return summary


def save_report(summary: dict, out_path: Path) -> None:
    out_path = Path(out_path)
    out_path.parent.mkdir(parents=True, exist_ok=True)

    # write a simple Markdown report
    with out_path.open("w", encoding="utf8") as f:
        f.write(f"# Data Analysis Report\n\n")
        f.write(f"- Shape: {summary['shape']}\n")
        f.write(f"- Columns: {', '.join(summary['columns'])}\n\n")

        f.write("## Data types\n\n")
        for c, t in summary["dtypes"].items():
            f.write(f"- {c}: {t}\n")

        f.write("\n## Missing values\n\n")
        for c, m in summary["missing"].items():
            f.write(f"- {c}: {m}\n")

        f.write("\n## Numeric summary (brief)\n\n")
        if summary.get("numeric_summary"):
            # print first few numeric columns
            for col, stats in summary["numeric_summary"].items():
                f.write(f"### {col}\n")
                for k, v in stats.items():
                    f.write(f"- {k}: {v}\n")
                f.write("\n")

        if summary.get("categorical_top"):
            f.write("\n## Categorical top values\n\n")
            for col, top in summary["categorical_top"].items():
                f.write(f"### {col}\n")
                for val, cnt in top.items():
                    f.write(f"- {val}: {cnt}\n")
                f.write("\n")

        f.write("\nGenerated by data_analysis.py\n")


def save_plots(df: pd.DataFrame, out_dir: Path, max_plots: int = 20) -> None:
    out_dir = Path(out_dir)
    out_dir.mkdir(parents=True, exist_ok=True)

    numeric = df.select_dtypes(include=[np.number])
    non_numeric = df.select_dtypes(exclude=[np.number])

    # Histograms for numeric columns
    plotted = 0
    for col in numeric.columns:
        if plotted >= max_plots:
            break
        plt.figure(figsize=(6, 4))
        sns.histplot(numeric[col].dropna(), kde=True)
        plt.title(f"Histogram: {col}")
        plt.tight_layout()
        out_file = out_dir / f"hist_{col}.png"
        plt.savefig(out_file)
        plt.close()
        plotted += 1

    # Bar plots for categorical (if not too many unique values)
    for col in non_numeric.columns:
        if plotted >= max_plots:
            break
        vc = df[col].value_counts().nlargest(20)
        plt.figure(figsize=(8, 4))
        sns.barplot(x=vc.values, y=vc.index)
        plt.title(f"Value counts: {col}")
        plt.tight_layout()
        out_file = out_dir / f"counts_{col}.png"
        plt.savefig(out_file)
        plt.close()
        plotted += 1

    # Correlation heatmap
    if numeric.shape[1] > 1:
        plt.figure(figsize=(10, 8))
        sns.heatmap(numeric.corr(), annot=True, fmt='.2f', cmap='coolwarm')
        plt.title('Correlation heatmap')
        plt.tight_layout()
        plt.savefig(out_dir / "correlation_heatmap.png")
        plt.close()


def parse_args(argv):
    p = argparse.ArgumentParser(description="Simple CSV data analysis tool")
    p.add_argument("file", help="Path to CSV/XLSX file to analyze")
    p.add_argument("--report", help="Output Markdown report path", default="report.md")
    p.add_argument("--plots", help="Output directory to save plots (optional)")
    p.add_argument("--max-plots", type=int, default=20, help="Maximum number of plots to generate")
    return p.parse_args(argv)


def main(argv=None):
    argv = sys.argv[1:] if argv is None else argv
    args = parse_args(argv)

    file_path = Path(args.file)
    try:
        df = load_data(file_path)
    except Exception as e:
        print(f"Error loading file: {e}")
        return 2

    summary = summarize(df)

    # Save JSON summary as well as the Markdown report
    report_path = Path(args.report)
    json_path = report_path.with_suffix('.json')
    report_path.parent.mkdir(parents=True, exist_ok=True)

    with json_path.open('w', encoding='utf8') as jf:
        json.dump(summary, jf, indent=2)

    save_report(summary, report_path)
    print(f"Report saved to {report_path}")

    if args.plots:
        save_plots(df, Path(args.plots), max_plots=args.max_plots)
        print(f"Plots saved to {args.plots}")

    return 0


if __name__ == '__main__':
    raise SystemExit(main())